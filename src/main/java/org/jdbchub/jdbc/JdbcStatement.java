package org.jdbchub.jdbc;

import java.sql.*;

public class JdbcStatement implements Statement {

	final JdbcConnection connection;
	final Statement target;

	public JdbcStatement(JdbcConnection connection, Statement target) {
		this.connection = connection;
		this.target = target;
	}

	String transformSql(String sql) {
		return connection.transformSql(sql);
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return target.executeQuery(transformSql(sql));
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return target.executeUpdate(transformSql(sql));
	}

	@Override
	public void close() throws SQLException {
		target.close();
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return target.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		target.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return target.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		target.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		target.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return target.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		target.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		target.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return target.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		target.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		target.setCursorName(name);
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return target.execute(transformSql(sql));
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		return target.getResultSet();
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return target.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return target.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		target.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return target.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		target.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return target.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return target.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return target.getResultSetType();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		target.addBatch(transformSql(sql));
	}

	@Override
	public void clearBatch() throws SQLException {
		target.clearBatch();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return target.executeBatch();
	}

	@Override
	public Connection getConnection() throws SQLException {
		return connection;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return target.getMoreResults(current);
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return target.getGeneratedKeys();
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return target.executeUpdate(transformSql(sql), autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return target.executeUpdate(transformSql(sql), columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return target.executeUpdate(transformSql(sql), columnNames);
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return target.execute(transformSql(sql), autoGeneratedKeys);
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return target.execute(transformSql(sql), columnIndexes);
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return target.execute(transformSql(sql), columnNames);
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return target.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return target.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		target.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return target.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		target.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return target.isCloseOnCompletion();
	}

	@Override
	public long getLargeUpdateCount() throws SQLException {
		return target.getLargeUpdateCount();
	}

	@Override
	public void setLargeMaxRows(long max) throws SQLException {
		target.setLargeMaxRows(max);
	}

	@Override
	public long getLargeMaxRows() throws SQLException {
		return target.getLargeMaxRows();
	}

	@Override
	public long[] executeLargeBatch() throws SQLException {
		return target.executeLargeBatch();
	}

	@Override
	public long executeLargeUpdate(String sql) throws SQLException {
		return target.executeLargeUpdate(transformSql(sql));
	}

	@Override
	public long executeLargeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return target.executeLargeUpdate(transformSql(sql), autoGeneratedKeys);
	}

	@Override
	public long executeLargeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return target.executeLargeUpdate(transformSql(sql), columnIndexes);
	}

	@Override
	public long executeLargeUpdate(String sql, String[] columnNames) throws SQLException {
		return target.executeLargeUpdate(transformSql(sql), columnNames);
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return target.unwrap(iface);
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return target.isWrapperFor(iface);
	}
}
